<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.85"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;callbacks&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;callbacks&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pvariant&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pvariant&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="590"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="591"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;__redisShiftCallback&amp;#039;." verbose="Non-pure function: &amp;#039;__redisShiftCallback&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="339"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisAsyncCommandArgv&amp;#039; is never used." verbose="The function &amp;#039;redisAsyncCommandArgv&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="674"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisAsyncConnectBindWithReuse&amp;#039; is never used." verbose="The function &amp;#039;redisAsyncConnectBindWithReuse&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="179"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisAsyncConnectUnix&amp;#039; is never used." verbose="The function &amp;#039;redisAsyncConnectUnix&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="187"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisAsyncFormattedCommand&amp;#039; is never used." verbose="The function &amp;#039;redisAsyncFormattedCommand&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\async.c" line="684"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="1010" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="1012" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="573"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="832"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisCommandArgv&amp;#039; is never used." verbose="The function &amp;#039;redisCommandArgv&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="1017"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisConnectUnixWithTimeout&amp;#039; is never used." verbose="The function &amp;#039;redisConnectUnixWithTimeout&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="739"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisEnableKeepAlive&amp;#039; is never used." verbose="The function &amp;#039;redisEnableKeepAlive&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="783"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisFreeCommand&amp;#039; is never used." verbose="The function &amp;#039;redisFreeCommand&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="568"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;redisFreeSdsCommand&amp;#039; is never used." verbose="The function &amp;#039;redisFreeSdsCommand&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\hiredis.c" line="521"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prv&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prv&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="253"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytelen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytelen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="254"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;success&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;success&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;elements&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;elements&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="306"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;root&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;root&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="307"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\read.c" line="369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="430"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="462"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;start&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;start&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="685"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="1229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="1230"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;oldfree&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;oldfree&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\sds.c" line="1248"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ExampleQt::m_ctx&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ExampleQt::m_ctx&amp;#039; is not initialized in the constructor." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\examples\example-qt.h" line="11"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%zd in format string (no. 1) requires &amp;#039;ssize_t&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%zd in format string (no. 1) requires &amp;#039;ssize_t&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\msvc\test_threads\test_threads.cpp" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;target&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;target&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\background_thread.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;npurge&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;npurge&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\background_thread.c" line="179"/>
        </error>
        <error id="assignmentInAssert" severity="warning" msg="Assert statement modifies &amp;#039;n_search&amp;#039;." verbose="Variable &amp;#039;n_search&amp;#039; is modified insert assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\background_thread.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cell&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cell&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ckh.c" line="64"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cell&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cell&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ckh.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tbucket&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tbucket&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ckh.c" line="138"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ckh.c" line="139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ctl.c" line="708"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ctl.c" line="740"/>
        </error>
        <error id="returnAddressOfAutoVariable" severity="error" msg="Address of auto-variable &amp;#039;cont-&amp;gt;ctl_arena&amp;#039; returned" verbose="Address of auto-variable &amp;#039;cont-&amp;gt;ctl_arena&amp;#039; returned" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\ctl.c" line="674"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;malloc_utrace_t::p&amp;#039; is never used." verbose="struct member &amp;#039;malloc_utrace_t::p&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="164"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;malloc_utrace_t::s&amp;#039; is never used." verbose="struct member &amp;#039;malloc_utrace_t::s&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="165"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;malloc_utrace_t::r&amp;#039; is never used." verbose="struct member &amp;#039;malloc_utrace_t::r&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="166"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_malloc_postfork&amp;#039; is never used." verbose="The function &amp;#039;_malloc_postfork&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3266"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_malloc_prefork&amp;#039; is never used." verbose="The function &amp;#039;_malloc_prefork&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3193"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_choose_hard&amp;#039; is never used." verbose="The function &amp;#039;arena_choose_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="485"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_tdata_get_hard&amp;#039; is never used." verbose="The function &amp;#039;arena_tdata_get_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="408"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bootstrap_free&amp;#039; is never used." verbose="The function &amp;#039;bootstrap_free&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="282"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bootstrap_malloc&amp;#039; is never used." verbose="The function &amp;#039;bootstrap_malloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="260"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;get_defrag_hint&amp;#039; is never used." verbose="The function &amp;#039;get_defrag_hint&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3334"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_dallocx&amp;#039; is never used." verbose="The function &amp;#039;je_dallocx&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="2920"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_mallctlbymib&amp;#039; is never used." verbose="The function &amp;#039;je_mallctlbymib&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3096"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_mallctlnametomib&amp;#039; is never used." verbose="The function &amp;#039;je_mallctlnametomib&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3076"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_malloc_usable_size&amp;#039; is never used." verbose="The function &amp;#039;je_malloc_usable_size&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3131"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_sdallocx&amp;#039; is never used." verbose="The function &amp;#039;je_sdallocx&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="2979"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;je_xallocx&amp;#039; is never used." verbose="The function &amp;#039;je_xallocx&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="2829"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;jemalloc_constructor&amp;#039; is never used." verbose="The function &amp;#039;jemalloc_constructor&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\jemalloc.c" line="3183"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\nstime.c" line="81"/>
        </error>
        <error id="shiftTooManyBits" severity="error" msg="Shifting 32-bit value by 32 bits is undefined behaviour" verbose="Shifting 32-bit value by 32 bits is undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\nstime.c" line="81"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nstime_monotonic_impl&amp;#039; is never used." verbose="The function &amp;#039;nstime_monotonic_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\nstime.c" line="149"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nstime_msec&amp;#039; is never used." verbose="The function &amp;#039;nstime_msec&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\nstime.c" line="27"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nstime_update_impl&amp;#039; is never used." verbose="The function &amp;#039;nstime_update_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\nstime.c" line="156"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;VirtualAlloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;VirtualAlloc&amp;#039; is not stored." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\pages.c" line="229"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;VirtualAlloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;VirtualAlloc&amp;#039; is not stored." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\pages.c" line="279"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pages_dodump&amp;#039; is never used." verbose="The function &amp;#039;pages_dodump&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\pages.c" line="376"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pages_dontdump&amp;#039; is never used." verbose="The function &amp;#039;pages_dontdump&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\pages.c" line="365"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;mfd!=-1&amp;#039; is always false" verbose="Condition &amp;#039;mfd!=-1&amp;#039; is always false" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="1444" info="Assignment &amp;#039;mfd=-1&amp;#039;, assigned value is -1"/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="1455" info="Condition &amp;#039;mfd!=-1&amp;#039; is always false"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bt_init&amp;#039; is never used." verbose="The function &amp;#039;bt_init&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="272"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_backtrace&amp;#039; is never used." verbose="The function &amp;#039;prof_backtrace&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="534"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_dump_header_impl&amp;#039; is never used." verbose="The function &amp;#039;prof_dump_header_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="1326"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_dump_open_impl&amp;#039; is never used." verbose="The function &amp;#039;prof_dump_open_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="958"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_free_sampled_object&amp;#039; is never used." verbose="The function &amp;#039;prof_free_sampled_object&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="257"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_lookup&amp;#039; is never used." verbose="The function &amp;#039;prof_lookup&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="785"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_malloc_sample_object&amp;#039; is never used." verbose="The function &amp;#039;prof_malloc_sample_object&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="241"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_tdata_init&amp;#039; is never used." verbose="The function &amp;#039;prof_tdata_init&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="1949"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;prof_tdata_reinit&amp;#039; is never used." verbose="The function &amp;#039;prof_tdata_reinit&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\prof.c" line="2023"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;decay_type.str_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;decay_type.str_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="602" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="643" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;alloc_count_title.str_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;alloc_count_title.str_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="701" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="742" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;mem_count_title.str_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;mem_count_title.str_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="781" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="794" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;in_gap_prev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;in_gap_prev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;in_gap_prev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;in_gap_prev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="413"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="1164"/>
        </error>
        <error id="signConversion" severity="warning" msg="Suspicious code: sign conversion of 18446744073709551615 in calculation because &amp;#039;18446744073709551615&amp;#039; has a negative value" verbose="Suspicious code: sign conversion of 18446744073709551615 in calculation because &amp;#039;18446744073709551615&amp;#039; has a negative value" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="63"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k_uint64_t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k_uint64_t&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="92"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k_uint32_t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k_uint32_t&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="93"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: col" verbose="Unused variable: col" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="95"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cmd" verbose="Unused variable: cmd" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="125"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: dst" verbose="Unused variable: dst" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="129"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cmd" verbose="Unused variable: cmd" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="149"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: dst" verbose="Unused variable: dst" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="153"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cmd" verbose="Unused variable: cmd" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="173"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: dst" verbose="Unused variable: dst" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="174"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k_uint64_t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k_uint64_t&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="200"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k_uint32_t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k_uint32_t&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="201"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: col" verbose="Unused variable: col" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;j&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;j&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="1204"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: epoch" verbose="Unused variable: epoch" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="1228"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;gen_mutex_ctl_str&amp;#039; is never used." verbose="The function &amp;#039;gen_mutex_ctl_str&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\stats.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\aligned_alloc.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;auto_arena_created&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;auto_arena_created&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\extent.c" line="130"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\mallocx.c" line="27" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\mallocx.c" line="31" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\mallocx.c" line="164"/>
        </error>
        <error id="deallocDealloc" severity="error" msg="Deallocating a deallocated pointer: p" verbose="Deallocating a deallocated pointer: p" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\overflow.c" line="38"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\posix_memalign.c" line="75"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\rallocx.c" line="27" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\rallocx.c" line="31" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\rallocx.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\rallocx.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\rallocx.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\sdallocx.c" line="13"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\xallocx.c" line="95" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\integration\xallocx.c" line="99" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;work&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;work&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\SFMT.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\SFMT.c" line="348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\SFMT.c" line="348"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;gen_rand32_range&amp;#039; is never used." verbose="The function &amp;#039;gen_rand32_range&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\SFMT.c" line="461"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;get_idstring&amp;#039; is never used." verbose="The function &amp;#039;get_idstring&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\SFMT.c" line="419"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="175" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="177" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="188" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="190" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ret&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="201" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="207" info=""/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test&amp;#039; is never used." verbose="The function &amp;#039;p_test&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="171"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test_fail&amp;#039; is never used." verbose="The function &amp;#039;p_test_fail&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="214"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test_fini&amp;#039; is never used." verbose="The function &amp;#039;p_test_fini&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="107"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test_init&amp;#039; is never used." verbose="The function &amp;#039;p_test_init&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="100"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test_no_malloc_init&amp;#039; is never used." verbose="The function &amp;#039;p_test_no_malloc_init&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="197"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;p_test_no_reentrancy&amp;#039; is never used." verbose="The function &amp;#039;p_test_no_reentrancy&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="184"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;test_is_reentrant&amp;#039; is never used." verbose="The function &amp;#039;test_is_reentrant&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\test.c" line="61"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;z&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\arena_reset.c" line="39" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\arena_reset.c" line="43" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nupdates0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nupdates0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\decay.c" line="491"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;p&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;p&amp;#039; nulled but not freed upon failure" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\decay.c" line="259"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;abc.int_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;abc.int_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="368" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="373" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;def.bool_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;def.bool_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="369" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="374" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;ghi.int_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;ghi.int_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="370" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="375" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;def.bool_val&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;def.bool_val&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="374" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\emitter.c" line="380" info=""/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function malloc() is not used." verbose="Return value of function malloc() is not used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\fork.c" line="78"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;malloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;malloc&amp;#039; is not stored." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\fork.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hugepage&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hugepage&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\pages.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\qr.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\qr.c" line="187"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\rtree.c" line="18"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\unit\rtree.c" line="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\linenoise\linenoise.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\linenoise\linenoise.c" line="352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;seq&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;seq&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\linenoise\linenoise.c" line="477"/>
        </error>
        <error id="umaskCalled" severity="style" msg="Obsolete function &amp;#039;umask&amp;#039; called. It is recommended to use &amp;#039;_umask&amp;#039; instead." verbose="Obsolete function &amp;#039;umask&amp;#039; called. It is recommended to use &amp;#039;_umask&amp;#039; instead." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\linenoise\linenoise.c" line="1164"/>
        </error>
        <error id="umaskCalled" severity="style" msg="Obsolete function &amp;#039;umask&amp;#039; called. It is recommended to use &amp;#039;_umask&amp;#039; instead." verbose="Obsolete function &amp;#039;umask&amp;#039; called. It is recommended to use &amp;#039;_umask&amp;#039; instead." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\linenoise\linenoise.c" line="1169"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua.h" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;previous&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;previous&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lcode.c" line="36"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\ldo.c" line="496"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;_popen&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;_popen&amp;#039; is not stored." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\liolib.c" line="178"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &amp;#039;token&amp;lt;257&amp;#039; is redundant or iscntrl() argument nr 1 can have invalid value. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Either the condition &amp;#039;token&amp;lt;257&amp;#039; is redundant or iscntrl() argument nr 1 can have invalid value. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\llex.c" line="79" info="Assuming that condition &amp;#039;token&amp;lt;257&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\llex.c" line="81" info="Invalid argument"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(fs)&amp;#039; is redundant or there is possible null pointer dereference: fs." verbose="Either the condition &amp;#039;if(fs)&amp;#039; is redundant or there is possible null pointer dereference: fs." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lparser.c" line="378" info="Assuming that condition &amp;#039;if(fs)&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lparser.c" line="359" info="Null pointer dereference"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;." verbose="failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\ltablib.c" line="39"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&amp;#039;&amp;#039; : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_BUILD_AS_DLL : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_BUILD_AS_DLL;LUA_CORE : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_COMPAT_GETN : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_COMPAT_OPENLIB : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_CORE : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_USELONGLONG : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_USER_H : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/lua.h:94] No header in #include\012LUA_USE_APICHECK : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_USE_LINUX : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012LUA_USE_MACOSX : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012_MSC_VER;_M_IX86;__SSE2__;__i386;__i386__ : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012_M_IX86;__SSE2__;__i386;__i386__ : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012_WIN32 : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012__ELF__;__GNUC__ : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012__STRICT_ANSI__ : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012loslib_c;luaall_c : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012luaL_setn : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012lua_c;luaall_c : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;.\012luaall_c : [C:/Users/bharm/Downloads/redis-unstable/deps/lua/src/ltablib.c:39] failed to expand &amp;#039;foreach&amp;#039;, Wrong number of parameters for macro &amp;#039;foreach&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\ltablib.c" line="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;(b=readline(prmt))!=NULL&amp;#039; is redundant or there is possible null pointer dereference: b." verbose="Either the condition &amp;#039;(b=readline(prmt))!=NULL&amp;#039; is redundant or there is possible null pointer dereference: b." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua.c" line="182" info="Assuming that condition &amp;#039;(b=readline(prmt))!=NULL&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua.c" line="184" info="Null pointer dereference"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_bit.c" line="168"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_bit.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;errmsg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;errmsg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;escstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;escstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="465"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="495"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;keytype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;keytype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="621"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;surrogate_low&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;surrogate_low&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="823"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;luaopen_cjson_safe&amp;#039; is never used." verbose="The function &amp;#039;luaopen_cjson_safe&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cjson.c" line="1418"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;local_realloc&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;local_realloc&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cmsgpack.c" line="99" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cmsgpack.c" line="102" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cmsgpack.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cmsgpack.c" line="428"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;luaopen_cmsgpack_safe&amp;#039; is never used." verbose="The function &amp;#039;luaopen_cmsgpack_safe&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lua_cmsgpack.c" line="935"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;r&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;r&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lundump.c" line="50"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;luaU_undump&amp;#039; is never used." verbose="The function &amp;#039;luaU_undump&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lundump.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;empty_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;empty_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\strbuf.c" line="225"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;strbuf_append_fmt&amp;#039; is never used." verbose="The function &amp;#039;strbuf_append_fmt&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\strbuf.c" line="202"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;strbuf_append_fmt_retry&amp;#039; is never used." verbose="The function &amp;#039;strbuf_append_fmt_retry&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\strbuf.c" line="221"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;strbuf_free_to_string&amp;#039; is never used." verbose="The function &amp;#039;strbuf_free_to_string&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\strbuf.c" line="116"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;strbuf_set_increment&amp;#039; is never used." verbose="The function &amp;#039;strbuf_set_increment&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\strbuf.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ae_select.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ae.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;numevents&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;numevents&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ae.c" line="360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retmask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retmask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ae.c" line="478"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ae_evport.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="414"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="429"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetFormatSock&amp;#039; is never used." verbose="The function &amp;#039;anetFormatSock&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="652"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetRead&amp;#039; is never used." verbose="The function &amp;#039;anetRead&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="412"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetSetSendBuffer&amp;#039; is never used." verbose="The function &amp;#039;anetSetSendBuffer&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="162"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetTcpConnect&amp;#039; is never used." verbose="The function &amp;#039;anetTcpConnect&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="348"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetTcpKeepAlive&amp;#039; is never used." verbose="The function &amp;#039;anetTcpKeepAlive&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="172"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetUnixConnect&amp;#039; is never used." verbose="The function &amp;#039;anetUnixConnect&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="400"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetUnixNonBlockConnect&amp;#039; is never used." verbose="The function &amp;#039;anetUnixNonBlockConnect&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="405"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;anetWrite&amp;#039; is never used." verbose="The function &amp;#039;anetWrite&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\anet.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;block&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;block&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cwd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cwd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;o&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;o&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="496"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="896"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\aof.c" line="985"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;if(o&amp;amp;&amp;amp;o-&amp;gt;encoding==1)&amp;#039; is redundant or there is possible null pointer dereference: o." verbose="Either the condition &amp;#039;if(o&amp;amp;&amp;amp;o-&amp;gt;encoding==1)&amp;#039; is redundant or there is possible null pointer dereference: o." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="512" info="Assuming that condition &amp;#039;if(o&amp;amp;&amp;amp;o-&amp;gt;encoding==1)&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="507" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byteval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byteval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byteval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byteval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;output&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;output&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="659"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;llbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;llbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="1088"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;printBits&amp;#039; is never used." verbose="The function &amp;#039;printBits&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bitops.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\blocked.c" line="114"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\blocked.c" line="546"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: node" verbose="Possible null pointer dereference: node" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2631" info="Assignment &amp;#039;node=NULL&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2638" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="616"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;link&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;link&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="619"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="768"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ci&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ci&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="1346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;failing&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;failing&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2001"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;channel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;channel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2023"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;message&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;message&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2023"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;channel_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;channel_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2024"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;message_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;message_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2024"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2143"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcvbuflen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcvbuflen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;min_pong&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;min_pong&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="3315"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="3759"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="4142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="4279"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;freshnodes&amp;#039; is modified but its new value is never used." verbose="Variable &amp;#039;freshnodes&amp;#039; is modified but its new value is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="2458"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\cluster.c" line="3414"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;name&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;name&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\config.c" line="1867" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\config.c" line="1870" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\config.c" line="836"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\config.c" line="1878"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;server.active_defrag_ignore_bytes&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;server.active_defrag_ignore_bytes&amp;#039; will never be negative so it is either pointless or an error to check if it is." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\config.c" line="561"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!filter&amp;#039; is always true" verbose="Condition &amp;#039;!filter&amp;#039; is always true" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="743" info="Assignment &amp;#039;filter=0&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="746" info="Condition &amp;#039;!filter&amp;#039; is always true"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;keyobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;keyobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="548"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: key" verbose="Uninitialized variable: key" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="590"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dbExists&amp;#039; is never used." verbose="The function &amp;#039;dbExists&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\db.c" line="227"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="470"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="480"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="183"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;key&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;key&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="462"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="951"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sigsegvHandler&amp;#039; is never used." verbose="The function &amp;#039;sigsegvHandler&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="1058"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;xorObjectDigest&amp;#039; is never used." verbose="The function &amp;#039;xorObjectDigest&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\debug.c" line="73"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1069"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 4) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 4) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1069"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 5) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 5) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1069"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 6) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 6) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1069"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 2) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1085"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1085"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="365"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prevHe&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prevHe&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;heref&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;heref&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1013"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1014"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dictFindEntryRefByPtrAndHash&amp;#039; is never used." verbose="The function &amp;#039;dictFindEntryRefByPtrAndHash&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1012"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dictGetHash&amp;#039; is never used." verbose="The function &amp;#039;dictGetHash&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="1003"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dictGetHashFunctionSeed&amp;#039; is never used." verbose="The function &amp;#039;dictGetHashFunctionSeed&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\dict.c" line="80"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\evict.c" line="163"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;keys&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;keys&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\evict.c" line="484"/>
        </error>
        <error id="signConversion" severity="warning" msg="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" verbose="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\evict.c" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_fast_cycle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_fast_cycle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\expire.c" line="102"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;debugmsg&amp;#039; is always false" verbose="Condition &amp;#039;debugmsg&amp;#039; is always false" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="329" info="Assignment &amp;#039;debugmsg=0&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="345" info="Condition &amp;#039;debugmsg&amp;#039; is always false"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="345"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="357"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="374"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;member&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;member&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;option_length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;option_length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="577"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="740"/>
        </error>
        <error id="signConversion" severity="warning" msg="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" verbose="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geo.c" line="740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r4&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r4&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r5&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r5&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r6&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r6&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r7&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r7&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r8&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r8&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r9&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r9&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r10&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r10&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r11&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r11&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r12&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r12&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r13&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r13&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r14&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r14&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r15&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r15&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;card&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;card&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\hyperloglog.c" line="1217"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dst&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dst&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\listpack.c" line="696"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;lpDelete&amp;#039; is never used." verbose="The function &amp;#039;lpDelete&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\listpack.c" line="746"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;lpLength&amp;#039; is never used." verbose="The function &amp;#039;lpLength&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\listpack.c" line="438"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;lpSeek&amp;#039; is never used." verbose="The function &amp;#039;lpSeek&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\listpack.c" line="760"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;v[0]==&amp;#039;5&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;v[0]==&amp;#039;5&amp;#039;&amp;#039; is always false" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\lolwut.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\lolwut5.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ref&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ref&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\lzf_c.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;off&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;off&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\lzf_c.c" line="125"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&amp;#039;&amp;#039; : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012BIT_ZERO_ON_LEFT;DGUX;MIPSEB;_CRAY;_IBMR2;_MIPSEB;__convex__;__hp9000;__hp9000s300;__hp9000s700;__hppa;__sparc;apollo;ibm032;ibm370;is68k;m68k;mc68000;pyr;sel;sparc;tahoe : [C:/Users/bharm/Downloads/redis-unstable/src/memtest.c:48] #error &amp;quot;ULONG_MAX value not supported.&amp;quot;\012BIT_ZERO_ON_RIGHT;MIPSEL;_MIPSEL;__alpha;__alpha__;__amd64__;__i386__;__x86_64__;ns32000;sun386;vax : [C:/Users/bharm/Downloads/redis-unstable/src/memtest.c:48] #error &amp;quot;ULONG_MAX value not supported.&amp;quot;\012MAC_OS_X_VERSION_10_6;__APPLE__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012MAC_OS_X_VERSION_10_6;__APPLE__;__FreeBSD__;__NetBSD__;__OpenBSD__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012_DTRACE_VERSION;__sun : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__APPLE__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__APPLE__;__GLIBC__;__linux : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__APPLE__;__GLIBC__;__linux__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__BIG_ENDIAN;__LITTLE_ENDIAN;__BYTE_ORDER : [C:/Users/bharm/Downloads/redis-unstable/src/memtest.c:48] #error &amp;quot;ULONG_MAX value not supported.&amp;quot;\012__BYTE_ORDER : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__FreeBSD__;__NetBSD__;__OpenBSD__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__GLIBC_PREREQ;__GLIBC__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__GLIBC_PREREQ;__GLIBC__;__linux__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__aarch64__;__arm64__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__arm;__arm__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__clang__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__linux__ : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__linux__;linux : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;\012__sparc;__sparc__ : [C:/Users/bharm/Downloads/redis-unstable/src/memtest.c:48] #error &amp;quot;ULONG_MAX value not supported.&amp;quot;\012__sun : [C:/Users/bharm/Downloads/redis-unstable/src/config.h:194] #error &amp;quot;Undefined or invalid BYTE_ORDER&amp;quot;" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\memtest.c" line="0"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;expiretime&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;expiretime&amp;#039; to itself." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="4244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;emptystring&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;emptystring&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="1639"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="2034"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;valueptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;valueptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="2344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;existsptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;existsptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="2345"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;moduleClusterNodeInfo::ip&amp;#039; is never used." verbose="struct member &amp;#039;moduleClusterNodeInfo::ip&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="3961"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;moduleClusterNodeInfo::master_id&amp;#039; is never used." verbose="struct member &amp;#039;moduleClusterNodeInfo::master_id&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="3963"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;rediscmd&amp;#039; is not assigned a value." verbose="Variable &amp;#039;rediscmd&amp;#039; is not assigned a value." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="654"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="2049"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\module.c" line="2050"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\multi.c" line="134"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &amp;#039;newline&amp;#039; is redundant or there is overflow in pointer subtraction." verbose="Either the condition &amp;#039;newline&amp;#039; is redundant or there is overflow in pointer subtraction." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1184" info="Assuming that condition &amp;#039;newline&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1188" info="Null pointer subtraction"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;id&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;id&amp;#039; to itself." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="954"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="478"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="478"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="727"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cfd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="747"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1574"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;peerid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;peerid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;client&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;client&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="2184"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="369"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="370"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getClientsMaxBuffers&amp;#039; is never used." verbose="The function &amp;#039;getClientsMaxBuffers&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\networking.c" line="1572"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%zd in format string (no. 1) requires &amp;#039;ssize_t&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." verbose="%zd in format string (no. 1) requires &amp;#039;ssize_t&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long long}&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="1356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="500"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;minlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;minlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="531"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &amp;#039;val-&amp;gt;lru&amp;#039; is less than zero." verbose="The unsigned variable &amp;#039;val-&amp;gt;lru&amp;#039; will never be negative so it is either pointless or an error to check if it is." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="1214"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;createZiplistObject&amp;#039; is never used." verbose="The function &amp;#039;createZiplistObject&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="221"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;inputCatSds&amp;#039; is never used." verbose="The function &amp;#039;inputCatSds&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="1072"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;isObjectRepresentableAsLongLong&amp;#039; is never used." verbose="The function &amp;#039;isObjectRepresentableAsLongLong&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\object.c" line="408"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\pubsub.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\pubsub.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clients&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clients&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\pubsub.c" line="90"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ln&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ln&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\pubsub.c" line="91"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: node" verbose="Possible null pointer dereference: node" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="704" info="Assignment &amp;#039;nokeep=NULL&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="716" info="Calling function &amp;#039;__quicklistDelNode&amp;#039;, 2nd argument &amp;#039;node&amp;#039; value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="581" info="Null pointer dereference"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: keep" verbose="Possible null pointer dereference: keep" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="704" info="Assignment &amp;#039;keep=NULL&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="712" info="Null pointer dereference"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: nokeep" verbose="Possible null pointer dereference: nokeep" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="704" info="Assignment &amp;#039;nokeep=NULL&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="715" info="Null pointer dereference"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: nextFn" verbose="Possible null pointer dereference: nextFn" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1133" info="Assignment &amp;#039;nextFn=NULL&amp;#039;, assigned value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1149" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset_update&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset_update&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;longstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;longstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1373"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1524"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 2) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%u in format string (no. 2) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1524"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1529"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1556"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1556"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1556"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1564"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1564"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1578"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1578"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1578"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1578"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1588"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1588"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1588"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1588"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 8) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 8) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1588"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2012"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2614"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2614"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2622"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2622"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 7) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2622"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="2647"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;node&amp;#039; is redundant or there is possible null pointer dereference: node." verbose="Either the condition &amp;#039;node&amp;#039; is redundant or there is possible null pointer dereference: node." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1576" info="Assuming that condition &amp;#039;node&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1586" info="Null pointer dereference"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="824"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="824"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="852"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="852"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="977"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1015"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 2) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1015"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%lld in format string (no. 3) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;." verbose="%lld in format string (no. 3) requires &amp;#039;long long&amp;#039; but the argument type is &amp;#039;unsigned long long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1250"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;quicklistTest&amp;#039; is never used." verbose="The function &amp;#039;quicklistTest&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\quicklist.c" line="1612"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 5) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 5) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1890"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 6) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 6) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1890"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="314"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;branch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;branch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1866"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &amp;#039;dst&amp;#039; used instead of size of its data." verbose="Size of pointer &amp;#039;dst&amp;#039; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &amp;#039;sizeof(*dst)&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="318"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &amp;#039;src&amp;#039; used instead of size of its data." verbose="Size of pointer &amp;#039;src&amp;#039; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &amp;#039;sizeof(*src)&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="347"/>
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &amp;#039;src&amp;#039; used instead of size of its data." verbose="Size of pointer &amp;#039;src&amp;#039; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &amp;#039;sizeof(*src)&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="360"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;raxRemove&amp;#039;." verbose="Non-pure function: &amp;#039;raxRemove&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="894"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="687"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1050"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;raxRandomWalk&amp;#039; is never used." verbose="The function &amp;#039;raxRandomWalk&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1732"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;raxSetDebugMsg&amp;#039; is never used." verbose="The function &amp;#039;raxSetDebugMsg&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="79"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;raxShow&amp;#039; is never used." verbose="The function &amp;#039;raxShow&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rax.c" line="1882"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;len&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;len&amp;#039; to itself." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="166"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;enclen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;enclen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="1491"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="242"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="247"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="248"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="249"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;rdbSaveDoubleValue&amp;#039; is never used." verbose="The function &amp;#039;rdbSaveDoubleValue&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\rdb.c" line="541"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-benchmark.c" line="432"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curlat&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curlat&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-benchmark.c" line="432"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;perc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;perc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-benchmark.c" line="433"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-benchmark.c" line="653"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;config::keysize&amp;#039; is never used." verbose="struct member &amp;#039;config::keysize&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-benchmark.c" line="62"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4529"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 2) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4427"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 3) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 3) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4427"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!r&amp;#039; is redundant or there is possible null pointer dereference: r." verbose="Either the condition &amp;#039;!r&amp;#039; is redundant or there is possible null pointer dereference: r." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2167" info="Assuming that condition &amp;#039;!r&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2170" info="Null pointer dereference"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;reply!=NULL&amp;#039; is redundant or there is possible null pointer dereference: reply." verbose="Either the condition &amp;#039;reply!=NULL&amp;#039; is redundant or there is possible null pointer dereference: reply." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2645" info="Assuming that condition &amp;#039;reply!=NULL&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2645" info="Null pointer dereference"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;reply==NULL&amp;#039; is redundant or there is possible null pointer dereference: reply." verbose="Either the condition &amp;#039;reply==NULL&amp;#039; is redundant or there is possible null pointer dereference: reply." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2975" info="Assuming that condition &amp;#039;reply==NULL&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2977" info="Null pointer dereference"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;path&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;path&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="294" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="298" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2821" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="2822" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;node&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;node&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4138" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4141" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4508" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4509" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;reply&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4524" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4525" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;table&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;table&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5110" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5112" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;host&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;host&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="363"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="828"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="910"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1775"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1777"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;argv2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;argv2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1778"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;got_comma&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;got_comma&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1779"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;keys&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;keys&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="1779"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;invalid_node_msg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;invalid_node_msg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="4139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reply&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reply&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5455"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5456"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;latency&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;latency&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5456"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reply&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reply&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5579"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5580"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;latency&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;latency&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5580"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="5668"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pct&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pct&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pct&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pct&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;reply&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;reply&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start_cycle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start_cycle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6556"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\redis-cli.c" line="6626"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;replid&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;replid&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1484" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1488" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="176"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;llstr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;llstr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buflen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buflen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;arg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;arg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1335"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psync_replid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psync_replid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1438"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;psync_offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;psync_offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1439"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1462"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1473"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1632"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1639"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1664"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1675"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1691"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1701"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1723"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1732"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1751"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\replication.c" line="1760"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;(argv=ldbReplParseCommand(&amp;amp;argc))==NULL&amp;#039; is redundant or there is possible null pointer dereference: argv." verbose="Either the condition &amp;#039;(argv=ldbReplParseCommand(&amp;amp;argc))==NULL&amp;#039; is redundant or there is possible null pointer dereference: argv." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\scripting.c" line="2294" info="Assuming that condition &amp;#039;(argv=ldbReplParseCommand(&amp;amp;argc))==NULL&amp;#039; is not redundant"/>
            <location file="..\..\..\Downloads\redis-unstable\src\scripting.c" line="2312" info="Null pointer dereference"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;f&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;f&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="598" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="603" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="447"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aux&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aux&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="479"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;start&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;start&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="704"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="1249"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="1250"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;oldfree&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;oldfree&amp;#039; is assigned a value that is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="1268"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sds_free&amp;#039; is never used." verbose="The function &amp;#039;sds_free&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="1116"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sds_realloc&amp;#039; is never used." verbose="The function &amp;#039;sds_realloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="1115"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sdsupdatelen&amp;#039; is never used." verbose="The function &amp;#039;sdsupdatelen&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sds.c" line="184"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ri" verbose="Possible null pointer dereference: ri" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="782" info="Calling function &amp;#039;sentinelEvent&amp;#039;, 3rd argument &amp;#039;ri&amp;#039; value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="613" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="606"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;channel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;channel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;payload&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;payload&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;di&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;di&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1573"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1574"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;si&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;si&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1707"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;di2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;di2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1757"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slave&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slave&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="2097"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="2662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;di&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;di&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="3646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;de&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;de&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="3647"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oldval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oldval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="3819"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="656"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="945"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;sentinelLeader::votes&amp;#039; is never used." verbose="struct member &amp;#039;sentinelLeader::votes&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="3812"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="2222"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sentinelAddFlagsToDictOfRedisInstances&amp;#039; is never used." verbose="The function &amp;#039;sentinelAddFlagsToDictOfRedisInstances&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1384"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sentinelDelFlagsToDictOfRedisInstances&amp;#039; is never used." verbose="The function &amp;#039;sentinelDelFlagsToDictOfRedisInstances&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1398"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sentinelGetInstanceTypeString&amp;#039; is never used." verbose="The function &amp;#039;sentinelGetInstanceTypeString&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sentinel.c" line="1588"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;/&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="1686"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rehash_db&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rehash_db&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="1021"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="2220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="2511"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="3027"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="3090"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="3600"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;preventCommandAOF&amp;#039; is never used." verbose="The function &amp;#039;preventCommandAOF&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="2364"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;preventCommandReplication&amp;#039; is never used." verbose="The function &amp;#039;preventCommandReplication&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\server.c" line="2369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ascii_logo&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ascii_logo&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\asciilogo.h" line="30"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: i&amp;gt;=argc. &amp;#039;i&amp;lt;argc || (i&amp;gt;=argc &amp;amp;&amp;amp; argv[i])&amp;#039; is equivalent to &amp;#039;i&amp;lt;argc || argv[i]&amp;#039;" verbose="The condition &amp;#039;i&amp;lt;argc || i&amp;gt;=argc &amp;amp;&amp;amp; argv[i]&amp;#039; is equivalent to &amp;#039;i&amp;lt;argc || argv[i]&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\setproctitle.c" line="138"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: i&amp;gt;=argc. &amp;#039;i&amp;lt;argc || (i&amp;gt;=argc &amp;amp;&amp;amp; argv[i])&amp;#039; is equivalent to &amp;#039;i&amp;lt;argc || argv[i]&amp;#039;" verbose="The condition &amp;#039;i&amp;lt;argc || i&amp;gt;=argc &amp;amp;&amp;amp; argv[i]&amp;#039; is equivalent to &amp;#039;i&amp;lt;argc || argv[i]&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\setproctitle.c" line="163"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setproctitle&amp;#039; is never used." verbose="The function &amp;#039;setproctitle&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\setproctitle.c" line="220"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;spt_init&amp;#039; is never used." verbose="The function &amp;#039;spt_init&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\setproctitle.c" line="152"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &amp;#039;CHAR64LONG16::c&amp;#039; is never used." verbose="union member &amp;#039;CHAR64LONG16::c&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sha1.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\siphash.c" line="126"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\siphash.c" line="186"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;v&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;v&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\siphash.c" line="324" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\siphash.c" line="325" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;se&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;se&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\slowlog.c" line="165"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;!=&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sort.c" line="480"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sdsele&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sdsele&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sort.c" line="402"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sdsele&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sdsele&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sort.c" line="434"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision." verbose="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sparkline.c" line="108"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision." verbose="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\sparkline.c" line="121"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nwritten&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\syncio.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nread&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nread&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\syncio.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_hash.c" line="63"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_hash.c" line="474"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_hash.c" line="641"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_list.c" line="566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;o&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;o&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_list.c" line="687"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;si&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;si&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_set.c" line="236"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;si-&amp;gt;start_key[0]&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;si-&amp;gt;start_key[0]&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="494" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="495" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;si-&amp;gt;end_key[0]&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;si-&amp;gt;end_key[0]&amp;#039; is reassigned a value before the old one has been used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="501" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="502" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;endkey&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;endkey&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="1016"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;help&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;help&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="2425"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;streamLogListpackContent&amp;#039; is never used." verbose="The function &amp;#039;streamLogListpackContent&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_stream.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;append&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;append&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_string.c" line="435"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="727"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="852"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="853"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="881"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="951"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="976"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1002"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1032"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1035"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1057"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1058"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1091"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ele&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ele&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1173"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1174"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1437"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="1510"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ele&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ele&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="2489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;score&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;score&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="2584"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rank&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rank&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="2774"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rank&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rank&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="2852"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;o&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;o&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="3257"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zuiBufferFromValue&amp;#039; is never used." verbose="The function &amp;#039;zuiBufferFromValue&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\t_zset.c" line="2068"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="746"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="750"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="753"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="757"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="761"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="765"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;string2l&amp;#039;." verbose="Non-pure function: &amp;#039;string2l&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="769"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;utilTest&amp;#039; is never used." verbose="The function &amp;#039;utilTest&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\util.c" line="831"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="1195"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." verbose="%ld in format string (no. 3) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned long&amp;#039;." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="1205"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: p" verbose="Possible null pointer dereference: p" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="776" info="Calling function &amp;#039;zipStoreEntryEncoding&amp;#039;, 1st argument &amp;#039;p&amp;#039; value is 0"/>
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="362" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rawlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rawlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rawlensize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rawlensize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="680"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nextdiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nextdiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="681"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prevlensize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prevlensize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prevlensize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prevlensize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="967"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prevlen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prevlen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="967"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;ziplistGet&amp;#039; argument order different: declaration &amp;#039;p, sval, slen, lval&amp;#039; definition &amp;#039;p, sstr, slen, sval&amp;#039;" verbose="Function &amp;#039;ziplistGet&amp;#039; argument order different: declaration &amp;#039;p, sval, slen, lval&amp;#039; definition &amp;#039;p, sstr, slen, sval&amp;#039;" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.h" line="43" info=""/>
            <location file="..\..\..\Downloads\redis-unstable\src\ziplist.c" line="1034" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;llen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;llen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;freelen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;freelen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="282"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapBlobLen&amp;#039; is never used." verbose="The function &amp;#039;zipmapBlobLen&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="367"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapDel&amp;#039; is never used." verbose="The function &amp;#039;zipmapDel&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="281"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapExists&amp;#039; is never used." verbose="The function &amp;#039;zipmapExists&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="345"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapGet&amp;#039; is never used." verbose="The function &amp;#039;zipmapGet&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="334"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapLen&amp;#039; is never used." verbose="The function &amp;#039;zipmapLen&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="350"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapNew&amp;#039; is never used." verbose="The function &amp;#039;zipmapNew&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="96"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zipmapSet&amp;#039; is never used." verbose="The function &amp;#039;zipmapSet&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zipmap.c" line="211"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ptr" verbose="Memory leak: ptr" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zmalloc.c" line="108"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ptr" verbose="Memory leak: ptr" sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zmalloc.c" line="140"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zlibc_free&amp;#039; is never used." verbose="The function &amp;#039;zlibc_free&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\zmalloc.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\utils\hashtable\rehashing.c" line="49"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_redisAssert&amp;#039; is never used." verbose="The function &amp;#039;_redisAssert&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\utils\hashtable\rehashing.c" line="4"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RedisModule_OnLoad&amp;#039; is never used." verbose="The function &amp;#039;RedisModule_OnLoad&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\modules\testmodule.c" line="400"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_dalloc_junk_small_impl&amp;#039; is never used." verbose="The function &amp;#039;arena_dalloc_junk_small_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1310"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_dalloc_promoted&amp;#039; is never used." verbose="The function &amp;#039;arena_dalloc_promoted&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1449"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_dalloc_small&amp;#039; is never used." verbose="The function &amp;#039;arena_dalloc_small&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1573"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_malloc_hard&amp;#039; is never used." verbose="The function &amp;#039;arena_malloc_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1371"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_palloc&amp;#039; is never used." verbose="The function &amp;#039;arena_palloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1389"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arena_ralloc&amp;#039; is never used." verbose="The function &amp;#039;arena_ralloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\arena.c" line="1632"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bioKillThreads&amp;#039; is never used." verbose="The function &amp;#039;bioKillThreads&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bio.c" line="253"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bioWaitStepOfType&amp;#039; is never used." verbose="The function &amp;#039;bioWaitStepOfType&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\bio.c" line="237"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;crc64Test&amp;#039; is never used." verbose="The function &amp;#039;crc64Test&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\crc64.c" line="188"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;endianconvTest&amp;#039; is never used." verbose="The function &amp;#039;endianconvTest&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\endianconv.c" line="108"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;extent_commit_wrapper&amp;#039; is never used." verbose="The function &amp;#039;extent_commit_wrapper&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\extent.c" line="1828"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;geohashDecodeWGS84&amp;#039; is never used." verbose="The function &amp;#039;geohashDecodeWGS84&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\geohash.c" line="202"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;large_dalloc_junk_impl&amp;#039; is never used." verbose="The function &amp;#039;large_dalloc_junk_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\large.c" line="75"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;large_dalloc_maybe_junk_impl&amp;#039; is never used." verbose="The function &amp;#039;large_dalloc_maybe_junk_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\large.c" line="81"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;large_prof_tctx_get&amp;#039; is never used." verbose="The function &amp;#039;large_prof_tctx_get&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\large.c" line="359"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;large_prof_tctx_reset&amp;#039; is never used." verbose="The function &amp;#039;large_prof_tctx_reset&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\large.c" line="369"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;large_salloc&amp;#039; is never used." verbose="The function &amp;#039;large_salloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\large.c" line="354"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;listGetIterator&amp;#039; is never used." verbose="The function &amp;#039;listGetIterator&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\adlist.c" line="186"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;listInsertNode&amp;#039; is never used." verbose="The function &amp;#039;listInsertNode&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\adlist.c" line="134"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;listReleaseIterator&amp;#039; is never used." verbose="The function &amp;#039;listReleaseIterator&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\adlist.c" line="200"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;listRewindTail&amp;#039; is never used." verbose="The function &amp;#039;listRewindTail&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\src\adlist.c" line="210"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;log_var_update_state&amp;#039; is never used." verbose="The function &amp;#039;log_var_update_state&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\log.c" line="44"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;luaH_isdummy&amp;#039; is never used." verbose="The function &amp;#039;luaH_isdummy&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\ltable.c" line="586"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;luaH_mainposition&amp;#039; is never used." verbose="The function &amp;#039;luaH_mainposition&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\ltable.c" line="582"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;lua_setallocf&amp;#039; is never used." verbose="The function &amp;#039;lua_setallocf&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\lua\src\lapi.c" line="1017"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;malloc_mutex_lock_slow&amp;#039; is never used." verbose="The function &amp;#039;malloc_mutex_lock_slow&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\mutex.c" line="47"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;malloc_tsd_cleanup_register&amp;#039; is never used." verbose="The function &amp;#039;malloc_tsd_cleanup_register&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="197"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;malloc_tsd_dalloc&amp;#039; is never used." verbose="The function &amp;#039;malloc_tsd_dalloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="165"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;malloc_tsd_malloc&amp;#039; is never used." verbose="The function &amp;#039;malloc_tsd_malloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="160"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tsd_fetch_slow&amp;#039; is never used." verbose="The function &amp;#039;tsd_fetch_slow&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="117"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tsd_init_check_recursion&amp;#039; is never used." verbose="The function &amp;#039;tsd_init_check_recursion&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="325"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tsd_init_finish&amp;#039; is never used." verbose="The function &amp;#039;tsd_init_finish&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tsd.c" line="346"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;mq_nanosleep&amp;#039; is never used." verbose="The function &amp;#039;mq_nanosleep&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\test\src\mq.c" line="8"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;rtree_leaf_alloc_impl&amp;#039; is never used." verbose="The function &amp;#039;rtree_leaf_alloc_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\rtree.c" line="46"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;rtree_leaf_elm_lookup_hard&amp;#039; is never used." verbose="The function &amp;#039;rtree_leaf_elm_lookup_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\rtree.c" line="223"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;rtree_node_alloc_impl&amp;#039; is never used." verbose="The function &amp;#039;rtree_node_alloc_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\rtree.c" line="31"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;run&amp;#039; is never used." verbose="The function &amp;#039;run&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\hiredis\examples\example-qt.cpp" line="20"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tcache_alloc_small_hard&amp;#039; is never used." verbose="The function &amp;#039;tcache_alloc_small_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tcache.c" line="88"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tcache_event_hard&amp;#039; is never used." verbose="The function &amp;#039;tcache_event_hard&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tcache.c" line="40"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tcache_salloc&amp;#039; is never used." verbose="The function &amp;#039;tcache_salloc&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\tcache.c" line="35"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;witness_depth_error_impl&amp;#039; is never used." verbose="The function &amp;#039;witness_depth_error_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\witness.c" line="50"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;witness_lock_error_impl&amp;#039; is never used." verbose="The function &amp;#039;witness_lock_error_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\witness.c" line="18"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;witness_not_owner_error_impl&amp;#039; is never used." verbose="The function &amp;#039;witness_not_owner_error_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\witness.c" line="41"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;witness_owner_error_impl&amp;#039; is never used." verbose="The function &amp;#039;witness_owner_error_impl&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\witness.c" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;zone_register&amp;#039; is never used." verbose="The function &amp;#039;zone_register&amp;#039; is never used." sinceDate="11/29/2018">
            <location file="..\..\..\Downloads\redis-unstable\deps\jemalloc\src\zone.c" line="438"/>
        </error>
    </errors>
</results>
